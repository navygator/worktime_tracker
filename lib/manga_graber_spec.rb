require "rspec"require "manga_graber"require "fakeweb"describe "grab images" do  let(:server_urls) { File.open("server_urls.txt").read.split }  before do    FakeWeb.register_uri(:get, %r|http://mangafox\.me/|, :body => File.open("mangafox.html"))    FakeWeb.register_uri(:get, %r|http://batoto\.net/|, :body => File.open("batoto.html"))  end  describe "#config" do    it "should proper config to each server" do      server_urls.each do |server|        params = config(server)        params.should_not eql({})        server[params[:name]].should_not be_nil      end    end  end  describe "#get_pages" do    describe "all servers" do      it "should return not empty array" do        server_urls.each do |url|          config url          (get_pages url).count.should > 0        end      end    end  end  describe "#get_images" do    describe "when not specify args" do      it "should raise argument exception" do        expect { get_images(nil, nil) }.to raise_error(ArgumentError)      end    end    describe "when given invalid args" do      describe "invalid url" do        it "should raise argument error" do          %w(http://test,com ftp://test.com).each do |url|            expect { get_images(url, "/local/temp") }.to raise_error(ArgumentError)          end        end      end    end    #describe "when given valid args" do    #  let(:url) { "http://mangafox.me/manga/title/v1/c01/" }    #  before do    #    FakeWeb.register_uri(:get, %r|http://c\.mfcdn\.net/.+\.jpg|, :body => "sample.jpg",    #                         :content_type => 'image/jpeg')    #    get_images(url, "c:/temp")    #  end    #    #  it "should download all images" do    #    Pathname.new("d:/tmp/test")    #  end    #end  endend